{
  "version": "0.1.0",
  "scope": "tree",
  "id": "4ece9b74-05f1-49b4-88b4-0bb6aa59d8a8",
  "Instance": "Explanation Experience",
  "description": "",
  "root": "fbf6059c-9007-4e53-a627-ce25ea3a50cc",
  "properties": {},
  "idModel": "649d9344123d1ba6e8e1aab4",
  "custom_nodes": [],
  "nodes": {
    "fbf6059c-9007-4e53-a627-ce25ea3a50cc": {
      "id": "fbf6059c-9007-4e53-a627-ce25ea3a50cc",
      "Concept": "Sequence",
      "Instance": "Sequence",
      "description": "",
      "properties": {},
      "display": {
        "x": 0,
        "y": 120
      },
      "firstChild": {
        "Id": "6f44a941-8f43-4000-8ae7-30e16a0f135f",
        "Next": {
          "Id": "cf54eccc-3086-4a7f-8b9a-74bbe6a8c12d",
          "Next": {
            "Id": "c43fdc3c-6f22-4a71-9537-f0dbd37ba7b3",
            "Next": {
              "Id": "efc759bf-510d-473b-9403-5f2835df8a4e",
              "Next": {
                "Id": "8b641f6a-5387-4c41-95f9-c1a5cbda2451",
                "Next": {
                  "Id": "ee5d7588-6346-40ce-828f-fca3317afcde",
                  "Next": null
                }
              }
            }
          }
        }
      }
    },
    "6f44a941-8f43-4000-8ae7-30e16a0f135f": {
      "id": "6f44a941-8f43-4000-8ae7-30e16a0f135f",
      "Concept": "User Question",
      "Instance": "User Question",
      "description": "",
      "properties": {},
      "display": {
        "x": -528,
        "y": 252
      },
      "params": {
        "Question": {
          "key": "Question",
          "value": "What does term X mean?"
        }
      }
    },
    "cf54eccc-3086-4a7f-8b9a-74bbe6a8c12d": {
      "id": "cf54eccc-3086-4a7f-8b9a-74bbe6a8c12d",
      "Concept": "Explanation Method",
      "Instance": "/Tabular/DicePublic",
      "description": "",
      "properties": {
        "Popularity": 1,
        "Applicability": true
      },
      "display": {
        "x": -312,
        "y": 252
      },
      "params": {
        "desired_class": {
          "key": "desired_class",
          "value": "opposite",
          "default": "opposite",
          "range": [
            "opposite",
            "0",
            "1"
          ],
          "required": "false",
          "description": "String representing the desired counterfactual class. Defaults to class 0 for multiclass problems and to opposite class for binary class problems. You may also use the string 'opposite' for binary classification",
          "type": "select"
        },
        "features_to_vary": {
          "key": "features_to_vary",
          "value": [
            "length",
            "entropy",
            "domain_grams",
            "word_grams"
          ],
          "default": [
            "length",
            "entropy",
            "domain_grams",
            "word_grams"
          ],
          "range": [
            "length",
            "entropy",
            "domain_grams",
            "word_grams"
          ],
          "required": "false",
          "description": "List of strings representing the feature names to vary. Defaults to all features.",
          "type": "checkbox"
        },
        "num_cfs": {
          "key": "num_cfs",
          "value": 3,
          "default": 3,
          "range": [
            null,
            null
          ],
          "required": "false",
          "description": "Number of counterfactuals to be generated for each instance.",
          "type": "number"
        },
        "method": {
          "key": "method",
          "value": "random",
          "default": "random",
          "range": [
            "random",
            "genetic",
            "kdtrees"
          ],
          "required": "false",
          "description": "The method used for counterfactual generation. The supported methods for private data are: 'random' (random sampling) and 'genetic' (genetic algorithms). Defaults to 'random'.",
          "type": "select"
        },
        "permitted_range": {
          "key": "permitted_range",
          "value": null,
          "default": null,
          "range": [
            null,
            null
          ],
          "required": "false",
          "description": "Dictionary with feature names as keys and permitted range in array as values.",
          "type": "text"
        }
      }
    },
    "c43fdc3c-6f22-4a71-9537-f0dbd37ba7b3": {
      "id": "c43fdc3c-6f22-4a71-9537-f0dbd37ba7b3",
      "Concept": "User Question",
      "Instance": "User Question",
      "description": "",
      "properties": {},
      "display": {
        "x": -108,
        "y": 252
      },
      "params": {
        "Question": {
          "key": "Question",
          "value": "How to improve the AI system performance?"
        }
      }
    },
    "efc759bf-510d-473b-9403-5f2835df8a4e": {
      "id": "efc759bf-510d-473b-9403-5f2835df8a4e",
      "Concept": "Explanation Method",
      "Instance": "/Tabular/KernelSHAPLocal",
      "description": "",
      "properties": {
        "Popularity": 1,
        "Applicability": true
      },
      "display": {
        "x": 96,
        "y": 252
      },
      "params": {
        "target_class": {
          "key": "target_class",
          "value": "1",
          "default": "1",
          "range": [
            "0",
            "1"
          ],
          "required": "false",
          "description": "Name of the target class to be explained. Ignore for regression models. Defaults to the first class target class defined in the configuration file.",
          "type": "select"
        },
        "plot_type": {
          "key": "plot_type",
          "value": "waterfall",
          "default": "waterfall",
          "range": [
            "waterfall",
            "decision",
            "force",
            "bar"
          ],
          "required": "false",
          "description": "String with the name of the plot to be generated.",
          "type": "select"
        }
      }
    },
    "8b641f6a-5387-4c41-95f9-c1a5cbda2451": {
      "id": "8b641f6a-5387-4c41-95f9-c1a5cbda2451",
      "Concept": "User Question",
      "Instance": "User Question",
      "description": "",
      "properties": {},
      "display": {
        "x": 312,
        "y": 252
      },
      "params": {
        "Question": {
          "key": "Question",
          "value": "What is the overall logic of the AI system?"
        }
      }
    },
    "ee5d7588-6346-40ce-828f-fca3317afcde": {
      "id": "ee5d7588-6346-40ce-828f-fca3317afcde",
      "Concept": "Explanation Method",
      "Instance": "/Tabular/PertCF",
      "description": "",
      "properties": {
        "Popularity": 1,
        "Applicability": true
      },
      "display": {
        "x": 516,
        "y": 252
      },
      "params": {
        "encode_cat": {
          "key": "encode_cat",
          "value": "OrdinalEncoder",
          "default": "OrdinalEncoder",
          "range": [
            "auto",
            "manual",
            "BackwardDifferenceEncoder",
            "BaseNEncoder",
            "BinaryEncoder",
            "CatBoostEncoder",
            "CountEncoder",
            "GLMMEncoder",
            "GrayEncoder",
            "HelmertEncoder",
            "JamesSteinEncoder",
            "LeaveOneOutEncoder",
            "MEstimateEncoder",
            "OneHotEncoder",
            "OrdinalEncoder",
            "PolynomialEncoder",
            "QuantileEncoder",
            "RankHotEncoder",
            "SumEncoder",
            "TargetEncoder",
            "WOEEncoder"
          ],
          "required": "false",
          "description": "Encoding technique for categorical features. Prefer the same technique that is used for the model for reliable results.",
          "type": "select"
        },
        "global_sim": {
          "key": "global_sim",
          "value": "euclidean",
          "default": "euclidean",
          "range": [
            "ManualEuclidean",
            "ShapEuclidean",
            "braycurtis",
            "canberra",
            "chebyshev",
            "jaccard",
            "hamming",
            "cosine",
            "sqeuclidean",
            "cityblock",
            "minkowski",
            "euclidean"
          ],
          "required": "false",
          "description": "Global similarity technique.",
          "type": "select"
        },
        "local_sim": {
          "key": "local_sim",
          "value": "auto",
          "default": "auto",
          "range": [
            "manual",
            "auto"
          ],
          "required": "false",
          "description": "Local similarity technique.",
          "type": "select"
        },
        "shap_sample": {
          "key": "shap_sample",
          "value": 27262,
          "default": 27262,
          "range": [
            1,
            272621
          ],
          "required": "false",
          "description": "Number of samples to use for calculating the SHAP values faster.",
          "type": "number"
        },
        "candidate_threshold": {
          "key": "candidate_threshold",
          "value": 0.5,
          "default": 0.5,
          "range": [
            0,
            1
          ],
          "required": "false",
          "description": "Step size threshold between CF candidates.",
          "type": "number"
        },
        "candidate_max_iter": {
          "key": "candidate_max_iter",
          "value": 20,
          "default": 20,
          "range": [
            null,
            null
          ],
          "required": "false",
          "description": "Maximum number of iterations to generate CF.",
          "type": "number"
        }
      }
    }
  },
  "display": {
    "camera_x": 692.5,
    "camera_y": 536.5,
    "camera_z": 0.5,
    "x": 0,
    "y": 0
  }
}